import asyncio
import aiohttp
import xlsxwriter
from pprint import pprint
async def perform_get_request(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.json()

async def perform_post_request(url, data):
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data) as response:
            return await response.json()



# base_api_url='https://jewelers.services/productcore/api'

# post_url = base_api_url + '/pl/Jewelry-Rings-2%C2%B7Stone-Rings'
# post_data = {
#         "filters": [{"key": "ItemsPerPage", "value": "360"}],
#         "page": 1,
#         "path": "Jewelry-Rings-2·Stone-Rings",
#         "sortCode": 5
#     }


# response = perform_post_request(post_url, post_data) #5 секунд
# transformer_url = (response['IndexedProducts']['Results'])
# list_url = []

# for url_detal in transformer_url:
#     get_url = base_api_url + "/pd/" + url_detal['URLDescription'] + "/" + url_detal['Style']
#     response_detail = perform_get_request(get_url)
#     list_url.append(response_detail)#вся информация по кольцам

base_api_url='https://jewelers.services/productcore/api'



async def main():
 #  root_categories = ['https://jewelers.services/productcore/api/pl/Jewelry-Rings-2%C2%B7Stone-Rings']
    root_categories = ['https://jewelers.services/productcore/api/pl/Jewelry-Rings-2%C2%B7Stone-Rings']

 #   get_url = 'https://jsonplaceholder.typicode.com/posts/1'

    post_url = root_categories[0]
    post_data = {
        "filters": [{"key": "ItemsPerPage", "value": "360"}],
        "page": 1,
        "path": "Jewelry-Rings-2·Stone-Rings",
        "sortCode": 5
    }

    tasks = [
#        asyncio.create_task(perform_get_request(get_url)),
        asyncio.create_task(perform_post_request(post_url, data=post_data))
    ]
    results = await asyncio.gather(*tasks)
#    results = await asyncio.gather(*tasks)
#    print(f"GET response: {results[0]}")
#    print(f"POST response: {results[0]}")Categories
 #   transformer_url = tasks(['IndexedProducts']['Results'])
    transformer_url = (results[0]['IndexedProducts']['Results'])
 

    list_url = []
   
  #  print(transformer_url['IndexedProducts']['Results'])

    for url_detal in transformer_url:
        get_url = base_api_url + "/pd/" + url_detal['URLDescription'] + "/" + url_detal['Style']
        task1 =asyncio.create_task(perform_get_request(get_url))
       # await task1
        results1 = await task1
      #  results1 = await asyncio.gather(*task1)
 
       # list_url.append(results1)#вся информация по кольцам
        # print(results1)
        

    #  def func(rings, key_1, key_2):
    #      list_empty = []
    #      for ring in rings:
    #          value = ring.get(key_1).get(key_2)
    #          list_empty.append(value)
    #      return list_empty

    #  list_for_excel =[]

    
    print(results1['Product']['BaseStyleSize'])
    print(results1['Product']['MSRP'])

asyncio.run(main())

 #   list_for_excel.append(func(results1, 'Product', 'Size'))

    

# if __name__ == '__main__':
#     asyncio.run(main())
